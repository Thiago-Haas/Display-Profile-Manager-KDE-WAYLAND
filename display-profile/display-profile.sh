#!/usr/bin/env bash
set -euo pipefail

need() { command -v "$1" >/dev/null 2>&1 || { echo "Missing: $1" >&2; exit 1; }; }
err() { echo "Error: $*" >&2; exit 1; }

PROFILE_DIR="${XDG_CONFIG_HOME:-$HOME/.config}/display-profiles"
mkdir -p "$PROFILE_DIR"

usage() {
  cat <<EOF
Usage:
  $(basename "$0") save <name>   - snapshot current Wayland layout into <name>
  $(basename "$0") apply <name>  - reapply saved profile
  $(basename "$0") list          - list saved profiles
  $(basename "$0") show          - show parsed current state (debug)
EOF
}

# Echo a normalized JSON of outputs with fields we need
current_state_json() {
  # kscreen-doctor JSON varies slightly across Plasma versions:
  # - Some have .outputs[].currentMode.name
  # - Others have .outputs[].currentModeId + .modes[]
  kscreen-doctor -j | jq -r '
    .outputs
    | map({
        name: (.name // .connector // .id // "unknown"),
        enabled: ( .enabled // false ),
        mode: (
          ( .currentMode.name ) //                       # preferred (string like "1920x1080@60")
          ( (.modes[]? | select(.id == .currentModeId).name) // null )
        ),
        pos: ( ( (.pos.x|tostring) + "," + (.pos.y|tostring) ) // "0,0" ),
        scale: ( .scale // 1 ),
        rotation: ( .rotation // "normal" )
      })
  '
}

save_profile() {
  local name="$1"
  local outfile="$PROFILE_DIR/$name.sh"
  need kscreen-doctor
  need jq

  local j
  j="$(current_state_json)"

  {
    echo '#!/usr/bin/env bash'
    echo 'set -euo pipefail'
    echo "# Auto-generated by display-profile on $(date)"
    echo

    # Disable all known outputs first (prevents overlap/jitter on reapply)
    echo "$j" | jq -r '.[].name | "kscreen-doctor output.\(.).disable"'

    # Apply settings for each output
    echo "$j" | jq -r '
      .[] |
      if .enabled == true then
        [
          (if .mode then "kscreen-doctor output.\(.name).mode.\(.mode)" else empty end),
          "kscreen-doctor output.\(.name).position.\(.pos)",
          "kscreen-doctor output.\(.name).scale.\(.scale)",
          (if .rotation then "kscreen-doctor output.\(.name).rotation.\(.rotation)" else empty end),
          "kscreen-doctor output.\(.name).enable"
        ] | .[]
      else
        "kscreen-doctor output.\(.name).disable"
      end
    '
  } > "$outfile"

  chmod +x "$outfile"
  echo "Saved: $outfile"
}

apply_profile() {
  local name="$1"
  local file="$PROFILE_DIR/$name.sh"
  [[ -f "$file" ]] || err "Profile not found: $name (expected $file)"
  bash "$file"
  echo "Applied: $name"
}

list_profiles() {
  ls -1 "$PROFILE_DIR"/*.sh 2>/dev/null | sed "s|$PROFILE_DIR/||; s|\.sh$||" || true
}

show_current() {
  need kscreen-doctor
  need jq
  current_state_json | jq
}

main() {
  local cmd="${1:-}"
  case "$cmd" in
    save)   [[ $# -ge 2 ]] || err "Please provide a profile name"; save_profile "$2" ;;
    apply)  [[ $# -ge 2 ]] || err "Please provide a profile name"; apply_profile "$2" ;;
    list)   list_profiles ;;
    show)   show_current ;;
    *)      usage; exit 1 ;;
  esac
}

main "$@"
